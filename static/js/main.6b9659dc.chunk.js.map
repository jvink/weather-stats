{"version":3,"sources":["components/station/index.js","components/weather/Bar.js","components/weather/BarRow.js","components/weather/index.js","components/RouteManager.js","index.js"],"names":["RangePicker","DatePicker","Station","useState","meta","undefined","data","setData","mode","setMode","value","setValue","geo","useGeolocation","useEffect","loading","error","a","async","fetch","latitude","longitude","res","json","fetchData","style","display","height","justifyContent","alignItems","code","length","flexDirection","marginBottom","map","s","key","id","to","moment","toISOString","name","distance","autoFocus","defaultPickerValue","placeholder","format","onChange","onPanelChange","Bar","z","i","j","color","ref","useRef","hover","setHover","hoverStyle","useSpring","scale","temperature_mean","mesh","position","onPointerOver","setTimeout","fontSize","marginTop","attach","args","colors","colormap","nshades","alpha","BarRow","m","current","rotation","x","Math","PI","month","index","split","round","extend","OrbitControls","Controls","props","useThree","gl","camera","useFrame","update","domElement","Weather","location","useLocation","urlParams","URLSearchParams","search","from","get","until","stationId","useRouteMatch","params","matrix","temparray","slice","push","fov","enablePan","enableZoom","rotateSpeed","RouteManager","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b9659dc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useGeolocation } from 'react-use';\nimport { Link } from 'react-router-dom';\nimport { DatePicker } from 'antd';\nimport moment from 'moment';\n\nconst { RangePicker } = DatePicker;\n\nfunction Station() {\n    const [data, setData] = useState({ meta: undefined, data: [] });\n    const [mode, setMode] = useState(['month', 'month']);\n    const [value, setValue] = useState([]);\n    const geo = useGeolocation();\n\n    useEffect(() => {\n        if (!geo.loading && !geo.error) {\n            const fetchData = async () => {\n                const res = await fetch(`https://api.meteostat.net/v1/stations/nearby?lat=${geo.latitude}&lon=${geo.longitude}&limit=5&key=dPTiJZzl`);\n                const data = await res.json();\n                setData(data);\n            };\n            fetchData();\n        }\n    }, [geo]);\n\n    const handlePanelChange = (value, mode) => {\n        setValue(value);\n        setMode([mode[0] === 'date' ? 'month' : mode[0], mode[1] === 'date' ? 'month' : mode[1]]);\n    };\n\n    const handleChange = value => {\n        setValue(value);\n    };\n\n    return (\n        <div style={{ display: \"flex\", height: \"100%\", justifyContent: \"center\", alignItems: \"center\" }}>\n            {geo.error?.code === 1 && <span>Please allow geolocation</span>}\n            {(value.length > 0 && geo.loading) && <span>Loading...</span>}\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <div>\n                    <h2>\n                        {value.length === 0 ? \"Choose months:\" : \"Pick a weather station:\"}\n                    </h2>\n                </div>\n                <div style={{ marginBottom: \"1em\" }}>\n                    {value.length > 0 && data.data.map(s => (\n                        <div key={s.id}>\n                            <Link to={`weather/${s.id}${value.length === 0 ? \"\" : `?from=${moment(value[0]).toISOString()}&until=${moment(value[1]).toISOString()}`}`}>\n                                {s.name} ({s.distance} km.)\n                            </Link>\n                        </div>\n                    ))}\n                </div>\n                <RangePicker\n                    autoFocus\n                    defaultPickerValue={[moment('01-2010', \"MM-YYYY\"), moment('01-2015', \"MM-YYYY\")]}\n                    placeholder={['Start month', 'End month']}\n                    format=\"MM-YYYY\"\n                    value={value}\n                    mode={mode}\n                    onChange={handleChange}\n                    onPanelChange={handlePanelChange}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Station;","import React, { useRef, useState } from 'react';\nimport { Dom } from 'react-three-fiber';\nimport { a, useSpring } from 'react-spring/three';\n\nfunction Bar({ z, i, j, color }) {\n    const ref = useRef();\n    const [hover, setHover] = useState(false);\n    const factor = 20;\n    const hoverStyle = useSpring({\n        scale: hover ? [2, 2, 1] : [1, 1, 1]\n    });\n    const handleHover = () => {\n        setHover(true);\n        setTimeout(() => {\n            setHover(false);\n        }, 1000);\n    };\n\n    if (z.temperature_mean !== null) {\n        return (\n            <a.mesh scale={hoverStyle.scale} ref={ref} key={j} position={[(i / 2), j / -4, z.temperature_mean / (factor * 2)]} onPointerOver={handleHover}>\n                {hover && <Dom><span style={{ fontSize: 8, marginTop: j / -4 }}>{z.temperature_mean}</span></Dom>}\n                <meshBasicMaterial attach=\"material\" color={color} />\n                <boxBufferGeometry attach=\"geometry\" args={[0.1, 0.1, z.temperature_mean / factor]} />\n            </a.mesh>\n        );\n    } else {\n        return <></>;\n    }\n}\n\nexport default Bar;","import React, { useRef, useEffect } from 'react';\nimport Bar from './Bar';\nimport colormap from 'colormap';\nimport { Dom } from 'react-three-fiber';\n\nlet colors = colormap({\n    colormap: 'jet',\n    nshades: 30,\n    format: 'hex',\n    alpha: 1\n});\n\nfunction BarRow({ m, i }) {\n    const ref = useRef();\n\n    useEffect(() => {\n        ref.current.rotation.x = 270 * (Math.PI / 180);\n    }, []);\n\n    return (\n        <group key={i}>\n            {i === 0 && m.map((month, index) => <Dom key={index} position={[-0.2, 0, index / 4]}>{month.month.split('-')[1]}</Dom>)}\n            <group ref={ref} position={[i / 20, 0, 0]}>\n                <Dom position={[i / 2, 0 + 0.4, 0]}>{m[0].month.split('-')[0]}</Dom>\n                {m.map((z, j) => <Bar key={j} i={i} j={j} z={z} color={colors[Math.round(z.temperature_mean) + 5]} />)}\n            </group>\n        </group>\n    );\n}\n\nexport default BarRow;","import React, { useEffect, useState, useRef } from 'react';\nimport { useRouteMatch, useLocation } from 'react-router-dom';\nimport { Canvas, useThree, extend, useFrame } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport BarRow from './BarRow';\nimport moment from 'moment';\n\nextend({ OrbitControls })\nconst Controls = props => {\n    const { gl, camera } = useThree()\n    const ref = useRef()\n    useFrame(() => ref.current.update())\n    return <orbitControls ref={ref} args={[camera, gl.domElement]} {...props} />\n}\n\nfunction Weather() {\n    const location = useLocation();\n    const urlParams = new URLSearchParams(location.search);\n    const from = moment(urlParams.get(\"from\")).format(\"YYYY-MM\") || undefined;\n    const until = moment(urlParams.get(\"until\")).format(\"YYYY-MM\") || undefined;\n    const match = useRouteMatch();\n    const { stationId } = match.params;\n    const [data, setData] = useState({ meta: undefined, data: [] });\n    let matrix = [];\n\n    useEffect(() => {\n        if (stationId) {\n            const fetchData = async () => {\n                const res = await fetch(`https://api.meteostat.net/v1/history/monthly?station=${stationId}&start=${from}&end=${until}&key=dPTiJZzl`);\n                const data = await res.json();\n                setData(data);\n            };\n            fetchData();\n        }\n    }, [from, until, stationId]);\n\n    const chunk = 12;\n    let temparray = [];\n    for (let i = 0, j = data.data.length; i < j; i += chunk) {\n        temparray = data.data.slice(i, i + chunk);\n        matrix.push(temparray);\n    }\n\n    return (\n        <Canvas\n            camera={{ position: [0, 4, 0], fov: 50 }}>\n            <Controls\n                enablePan\n                enableZoom\n                rotateSpeed={1}\n            />\n            {matrix.map((m, i) => <BarRow m={m} i={i} key={i} />)}\n        </Canvas>\n    );\n}\n\nexport default Weather;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from 'react-router-dom';\nimport Station from './station';\nimport Weather from './weather';\n\nfunction RouteManager() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/weather/:stationId\">\n                    <Weather />\n                </Route>\n                <Route path=\"/\">\n                    <Station />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default RouteManager;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RouteManager from './components/RouteManager';\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n    return (\n        <div style={{ height: \"100%\" }}>\n            <RouteManager />\n        </div>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}